<html>
  <head>
      
  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css">
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>
  <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js"></script>
    <script src="https://aframe.io/releases/1.0.4/aframe.min.js"></script>
    <script src="https://unpkg.com/aframe-event-set-component@3.0.3/dist/aframe-event-set-component.min.js"></script>
    <script src="https://unpkg.com/super-hands@2.1.0/dist/super-hands.min.js"></script>
    <script src="//cdn.rawgit.com/donmccurdy/aframe-physics-system/v4.0.1/dist/aframe-physics-system.min.js"></script>
    <script src="https://cdn.jsdelivr.net/gh/donmccurdy/aframe-extras@v6.1.0/dist/aframe-extras.min.js"></script>
    
    <style>
        div {
    position: absolute;
    bottom: 2%;
    left: 50%;
    margin-right: -50%;
    transform: translate(-50%, -50%);
    z-index: 1;
    text-align: center;
}

button {
    display: inline-block;
}

/*menu*/
input{
    z-index: 5;
}
  
  .slder {
    -webkit-appearance: none;
    width: 100%;
    height: 25px;
    background: #d3d3d3;
    outline: none;
    opacity: 0.7;
    -webkit-transition: .2s;
    transition: opacity .2s;
  }
  
  .slder:hover {
    opacity: 1;
  }
  
  .slder::-webkit-slider-thumb {
    -webkit-appearance: none;
    appearance: none;
    width: 15px;
    height: 25px;
    background: #4CAF50;
    cursor: pointer;
  }
  
  .slder::-moz-range-thumb {
    width: 15px;
    height: 25px;
    background: #4CAF50;
    cursor: pointer;
  }


.card{
    box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);
    display: inline-block;
    width:80px;
    height: 94.5px;
    margin-left: 3px;
    margin-right: 3px;
    background-position: center;
    background-repeat: no-repeat;
    background-size: cover;
}

#color{
    background-image : url('/cards/colors.png');
}

#remove{
    background-image : url('/cards/remove.png');
}

#objmtl{
    background-image : url('/cards/sofa-mtl.jpg');
}

#green{
    background-image : url('/cards/green.png');
}

#red{
    background-image : url('/cards/red.png');
}

#brown{
    background-image : url('/cards/brown.png');
}

#chair{
    background-image : url('/cards/chair.png');
}

#sofa{
    background-image : url('/cards/sofa.png');
}

#sofa1{
    background-image : url('/cards/sofa1.png');
}

#table{
    background-image : url('/cards/table.png');
}

#rotation{
    background-image : url('/cards/rots.png');
}

#position{
    background-image : url('/cards/position.png');
}

#scaling{
    background-image : url('/cards/scaling.png');
}

#photo{
    background-image : url('/cards/photo.png');
}

#posx{
    background-image : url('/cards/x.png');
}

#posy{
    background-image : url('/cards/y.png');
}

#posz{
    background-image : url('/cards/z.png');
}

#movefree{
    background-image : url('/cards/freemove.png');
}

#moves_on{
    background-image : url('/cards/rotation.png');
}

/*toggle*/

.switch {
    position: relative;
    display: inline-block;
    width: 30px;
    height: 17px;
}

.switch input {
    opacity: 0;
    width: 0;
    height: 0;
}

.slider {
    position: absolute;
    cursor: pointer;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: #ccc;
    -webkit-transition: .4s;
    transition: .4s;
}

.slider:before {
    position: absolute;
    content: "";
    height: 13px;
    width: 13px;
    left: 2px;
    bottom: 2px;
    background-color: white;
    -webkit-transition: .4s;
    transition: .4s;
}

input:checked + .slider {
    background-color: #2196F3;
}

input:focus + .slider {
    box-shadow: 0 0 0.5px #2196F3;
}

input:checked + .slider:before {
    -webkit-transform: translateX(13px);
    -ms-transform: translateX(13px);
    transform: translateX(13px);
}

.slider.round {
    border-radius: 17px;
}

.slider.round:before {
    border-radius: 50%;
}

/*collapse*/

#collapseOne{
    position: absolute;
    bottom: 2%;
}

.circleWrapper{
    z-index: 5;
    position: relative;
    bottom: 30%;
    left: 95%;
}

/*circle animation*/

.circle {
    z-index: 5;
    border-radius: 50%;
    background-color: deepskyblue;
    width: 30px;
    height: 30px;
    position: absolute;
    opacity: 0;
    animation: scaleIn 4s infinite cubic-bezier(.36, .11, .89, .32);
}

@keyframes scaleIn {
    from {
        transform: scale(.5, .5);
        opacity: .5;
    }
    to {
        transform: scale(2.0, 2.0);
        opacity: 0;
    }
}
    </style>
  </head>
  <body>

    <a-scene  physics="gravity:0" shadow="autoUpdate: false castShadow: true type:pcsoft">
            <a-entity light="type: ambient; intensity: 0.5;"></a-entity>
            <a-entity light="type: directional;
                       castShadow: true;
                       intensity: 0.01;
                       shadowCameraVisible: true;" position="1.235 1 1"></a-entity>
        <a-entity progressive-controls></a-entity>
      <a-assets>
        <a-asset-item id="floor-obj" src="/obj/floor.obj"></a-asset-item>
        <a-asset-item id="floor-mtl" src="/obj/floor.mtl"></a-asset-item>
        <a-asset-item  id="walls-obj"  src="/obj/walls.obj"></a-asset-item>
        <a-asset-item  id="walls-mtl"  src="/obj/walls.mtl"></a-asset-item>
        <a-asset-item  id="celling-obj"  src="/obj/celling.obj"></a-asset-item>
        <a-asset-item  id="celling-mtl"  src="/obj/celling.mtl"></a-asset-item>
        <a-asset-item  id="door-obj"  src="/obj/door.obj"></a-asset-item>
        <a-asset-item  id="door-mtl"  src="/obj/door.mtl"></a-asset-item>
        <a-asset-item  id="w1-obj"  src="/obj/w1.obj"></a-asset-item>
        <a-asset-item  id="w1-mtl"  src="/obj/w1.mtl"></a-asset-item>
        <a-asset-item  id="w2-obj"  src="/obj/w2.obj"></a-asset-item>
        <a-asset-item  id="w2-mtl"  src="/obj/w2.mtl"></a-asset-item>
        <a-asset-item  id="w3-obj"  src="/obj/w3.obj"></a-asset-item>
        <a-asset-item  id="w3-mtl"  src="/obj/w3.mtl"></a-asset-item>
        <a-asset-item  id="sofa-obj"  src="/obj/sofa.obj"></a-asset-item>
        <a-asset-item  id="sofa-mtl"  src="/obj/sofa.mtl"></a-asset-item>
        <a-asset-item   id="chair-obj"  src="/obj/chair.obj"></a-asset-item>
        <a-asset-item  id="chair-mtl"  src="/obj/chair.mtl"></a-asset-item>
        <a-asset-item  id="table-obj"  src="/obj/table.obj"></a-asset-item>
        <a-asset-item  id="table-mtl"  src="/obj/table.mtl"></a-asset-item>
        <a-asset-item  id="sofa1-obj"  src="/obj/sofa-1.obj"></a-asset-item>
        <a-asset-item  id="sofa1-mtl"  src="/obj/sofa.mtl"></a-asset-item>
        <a-asset-item  id="album-obj"  src="/obj/album.obj"></a-asset-item>
        <a-asset-item  id="album-mtl"  src="/obj/album.mtl"></a-asset-item>
        <a-asset-item id="footer-obj" src="/obj/footer.obj"></a-asset-item>
      </a-assets>

      <a-obj-model log  static-body id="ground" src="#floor-obj" mtl="#floor-mtl" shadow=" receive:true;"></a-obj-model>
      <a-obj-model src="#walls-obj" mtl="#walls-mtl" shadow="cast:true; receive:true;"></a-obj-model>
      <a-obj-model src="#celling-obj" mtl="#celling-mtl" shadow=" receive:true;"></a-obj-model>
      <a-obj-model src="#door-obj" mtl="#door-mtl" shadow="cast:true; receive:true;"></a-obj-model>
      <a-obj-model src="#w1-obj" mtl="#w1-mtl" shadow="cast:true; receive:true;"></a-obj-model>
      <a-obj-model src="#w2-obj" mtl="#w2-mtl" shadow="cast:true; receive:true;"></a-obj-model>
      <a-obj-model src="#w3-obj" mtl="#w3-mtl" shadow="cast:true; receive:true;"></a-obj-model>
      <a-entity light="type:directional; castShadow:true; intensity:0.3; shadowCameraBias:0.01; shadowCameraVisible:true; shadowMapWidth:1024; shadowMapHeight:1024;" position="1.235 1 1"></a-entity>
      <a-entity light="type: ambient; intensity: 0.2;"></a-entity>
      <script>
          /* 2D Properties */

var selected_element;
var teleportation_flag=true;
var click_counter=0;
var selected_object;
var id;
var pre_position;
var pos;

function position(){
    hide('objectmenu');
    show('moving');
    hide('rotating');
    hide('scaling_options');
}

function scaling(){
    hide('objectmenu');
    show('scaling_options');
    hide('rotating');
    hide('moving');
}

function rotation(){
    hide('objectmenu');
    hide('rotating');
    show('moves');
    hide('moving');
    hide('scaling_options');
}

function change_rotation(direction, flag){
    var value;
    if (flag=='+'){
        value=-5;
    }
    else{
        value=5;
    }
    if(direction=='x'){
        pos=selected_element.getAttribute("rotation");
        pos.x=pos.x+value;
        selected_element.setAttribute("rotation", pos);
    }
    else if(direction=='y'){
        pos=selected_element.getAttribute("rotation");
        pos.y=pos.y+value;
        selected_element.setAttribute("rotation", pos);
    }
    else if(direction=='z'){
        pos=selected_element.getAttribute("rotation");
        pos.z=pos.z+value;
        selected_element.setAttribute("rotation", pos);
    }
}

function change_scale(flag){

    var value;
    if (flag=='+'){
        value=0.1;
    }
    else{
        value=-0.1;
    }
    pos=selected_element.getAttribute("scale");
    pos.x=pos.x+value;
    pos.y=pos.y+value;
    pos.z=pos.z+value;
    selected_element.setAttribute("scale", pos);
}

function change_position(direction, flag){
    var value;
    if (flag=='+'){
        value=-0.1;
    }
    else{
        value=0.1;
    }
    if(direction=='x'){
        pos=selected_element.getAttribute("position");
        pos.x=pos.x+value;
        selected_element.setAttribute("position", pos);
    }
    else if(direction=='y'){
        pos=selected_element.getAttribute("position");
        pos.y=pos.y+value;
        selected_element.setAttribute("position", pos);
    }
    else if(direction=='z'){
        pos=selected_element.getAttribute("position");
        pos.z=pos.z+value;
        selected_element.setAttribute("position", pos);
    }
}

function mouse(x){
    x.click();
}

function hide(x){
    document.getElementById(x).style.display="none";
}

function show(x){
    document.getElementById(x).style.display="block";
}

function brown() {
    if(selected_element!=undefined){
        selected_element.setAttribute("mtl", "");
        selected_element.setAttribute('material', 'color', '#7b3911');
    }
}

function red(){
    if(selected_element!=undefined){
        selected_element.setAttribute("mtl", "");
        selected_element.setAttribute('material', 'color', '#3f050e');
    }
}

function green(){
    if(selected_element!=undefined){
        selected_element.setAttribute("mtl", "");
        selected_element.setAttribute('material', 'color', '#23595d');
    }
}

function remove(){
    if(selected_element!=undefined){
        hide('objectmenu');
        selected_element.parentNode.removeChild(selected_element);
        click_counter=0;
    }
}

function objmtl(){
    if(selected_element!=undefined){
        id=selected_element.className+"mtl";
        selected_element.setAttribute("mtl",id);
    }
}

function photo(){
    selected_object="#album-";
}

function sofa(){
    selected_object="#sofa-";
}

function chair(){
    selected_object="#chair-";
}

function table(){
    selected_object="#table-";
}

function sofa1(){
    selected_object="#sofa1-";
}

function color(){
    show('colors');
    hide('objects');
    hide('objectmenu');
}

function moveFree(){
  if(selected_element!=undefined){
    selected_element.removeAttribute('dragnrotate1');
    selected_element.removeAttribute('dragnrotate2');
    selected_element.removeAttribute('dragnrotate3');
    selected_element.setAttribute('grabbable', '');
  }
  hide('colors');
  hide('objects');
  hide('objectmenu');
}

function rots(x){
  if(selected_element!=undefined){
      if(x=='x'){
        //selected_element.setAttribute("dynamic-body", {angularDamping: 1, linearDamping: 0.99});
        selected_element.setAttribute('dragnrotate2', '');
        selected_element.removeAttribute('dragnrotate1');
        selected_element.removeAttribute('dragnrotate3');
      }
      else if(x=='y'){
        //selected_element.setAttribute("dynamic-body", {angularDamping: 1, linearDamping: 0.99});
        selected_element.setAttribute('dragnrotate1', '');
        selected_element.removeAttribute('dragnrotate2');
        selected_element.removeAttribute('dragnrotate3');
      }
      else if(x=='z'){
        //selected_element.setAttribute("dynamic-body", {angularDamping: 1, linearDamping: 0.99});
        selected_element.setAttribute('dragnrotate3', '');
        selected_element.removeAttribute('dragnrotate2');
        selected_element.removeAttribute('dragnrotate1');
      }
    }
}

function movesOn(){
  hide('colors');
  hide('objects');
  hide('objectmenu');
  show('rotating');
  hide('moves');
}

/* 3D Properties */

let camerarotation, cameraposition;

let convert = (data) => {
    let result = {};
    result.x = 0;
    result.y = data.y * 57.2958;
    result.z = data.z * 57.2958;
    return result;
};

let convert_sofa = (data) => {
    let result = {};
    result.x = 0;
    result.y = data.y * 57.2958+180;
    result.z = data.z * 57.2958;
    return result;
};

let convert_pos = (data1,data2) => {
    let dis=Math.sqrt(Math.pow((data1.x-data2.x), 2)+Math.pow(data1.z-data2.z, 2))
    let t=3/dis;
    let result = {};
    result.x = ((1-t)*data1.x+t*data2.x);
    result.y = 1.6;
    result.z = ((1-t)*data1.z+t*data2.z);
    return result;
};

function teleportationON(){
    document.getElementById("toggle").checked = true;
    teleportation_flag=true;
    hide('objects');
    hide('objectmenu');
    hide('colors');
    document.getElementById('collapse').style.backgroundColor  = "deepskyblue";
    document.getElementById('collapse1').style.backgroundColor  = "deepskyblue";
    document.getElementById('collapse2').style.backgroundColor  = "deepskyblue";
    document.getElementById('collapse3').style.backgroundColor  = "deepskyblue";
    click_counter=0;
}

function teleportationOFF(){
    document.getElementById("toggle").checked = false;
    teleportation_flag=false;
    show('objects');
    hide('objectmenu');
    hide('colors');
    document.getElementById('collapse').style.backgroundColor  = "#ff427b";
    document.getElementById('collapse1').style.backgroundColor  = "#ff427b";
    document.getElementById('collapse2').style.backgroundColor  = "#ff427b";
    document.getElementById('collapse3').style.backgroundColor  = "#ff427b";
    click_counter=0;
}

AFRAME.registerComponent('rotation-reader', {
    tick: function () {
        camerarotation = this.el.object3D.rotation;
        cameraposition = this.el.object3D.position;
    }
});

AFRAME.registerComponent('log', {
    init: function() {

        $('input[type="checkbox"]').click(function(){
            if($(this).prop("checked") == true){
                teleportationON();
            }
            else if($(this).prop("checked") == false){
                teleportationOFF();
            }
        });

        document.getElementById("ground").addEventListener("click", (event) => {

            hide('objects');
            hide('objectmenu');
            hide('colors');
            hide('rotating');
            hide('moving');
            hide('scaling_options');

            if(teleportation_flag==false){
                if(selected_object==undefined) {teleportationON();}

                if(selected_object!=undefined){
                    
                    let position = {
                        x: event.detail.intersection.point.x,
                        y: 0.1,
                        z: event.detail.intersection.point.z
                    };

                    let scene = document.querySelector('a-scene');
                    let object = document.createElement('a-obj-model');

                    object.setAttribute("src", selected_object+"obj");
                    object.setAttribute("mtl", selected_object+"mtl");
                    object.setAttribute("class",selected_object);
                    object.setAttribute("position", position);
                    
                    if(selected_object=='#sofa-'){
                        object.setAttribute("rotation", convert_sofa(camerarotation));
                    }
                    else if(selected_object=='#album-'){
                        object.setAttribute("scale", '0.01 0.01 0.01');
                    }
                    else{
                        object.setAttribute("rotation", convert(camerarotation));
                    }
                    //object.setAttribute("dynamic-body", {angularDamping: 1, linearDamping: 0.99});
                    //object.setAttribute('dragnrotate2', '');
                    object.setAttribute('shadow', { cast: true });
                    object.setAttribute('shadow', { receive: true });
                    selected_element=undefined;
                    selected_object=undefined;

                    object.addEventListener("click", function () {
                        selected_element=object;
                        hide('objects');
                        show('objectmenu');
                        hide('colors');
                        hide('rotating');
                        hide('moving');
                        hide('scaling_options');
                        hide('moves');
                        selected_element.removeAttribute('grabbable');
                        // selected_element.removeAttribute('dragnrotate1');
                        // selected_element.removeAttribute('dragnrotate2');
                        // selected_element.removeAttribute('dragnrotate3');
                    });
 
                    scene.appendChild(object);
                    teleportationON();
                }
                click_counter=0;
            }

            // else{
            //     if(click_counter>=2){
                    
            //         let camposition = {
            //             x: event.detail.intersection.point.x,
            //             y: 1.6,
            //             z: event.detail.intersection.point.z
            //         };

            //         var cam = document.querySelector("#cameraPositions1");
            //         cam.setAttribute("position",camposition);
            //         click_counter=0;
            //     }
            //     else{
            //         click_counter+=1;
            //     }
            // }
        });

    }
});

AFRAME.registerComponent("foo", {
    init: function () {
      var view = document.getElementById("button");
      var plane1 = document.getElementById("curtain-plane1");
      var cylinder = document.getElementById("curtain-cylinder");
      var plane2 = document.getElementById("curtain-plane2");
      var cone1 = document.getElementById("curtain-cone1");
      var cone2 = document.getElementById("curtain-cone2");
      var cone3 = document.getElementById("curtain-cone3");
      var cone4 = document.getElementById("curtain-cone4");
      var light = document.getElementById("light");
      var discontinuousPlane1 = document.querySelector("#discontinuous-plane1");
      var discontinuousPlane2 = document.querySelector("#discontinuous-plane2");
      var discontinuousPlane3 = document.querySelector("#discontinuous-plane3");
      var discontinuousPlane4 = document.querySelector("#discontinuous-plane4");
      var discontinuousPlane5 = document.querySelector("#discontinuous-plane5");
      var discontinuousPlane6 = document.querySelector("#discontinuous-plane6");
      var discontinuousPlane7 = document.querySelector("#discontinuous-plane7");
      var discontinuousPlane8 = document.querySelector("#discontinuous-plane8");
      var discontinuousPlane9 = document.querySelector("#discontinuous-plane9");
      var discontinuousPlane10 = document.querySelector("#discontinuous-plane10");
      var discontinuousPlane11 = document.querySelector("#discontinuous-plane11");
      var discontinuousPlane12 = document.querySelector("#discontinuous-plane12");
      var discontinuousPlane13 = document.querySelector("#discontinuous-plane13");
      var discontinuousPlane14 = document.querySelector("#discontinuous-plane14");
      var discontinuousPlane15 = document.querySelector("#discontinuous-plane15");
      var discontinuousPlane16 = document.querySelector("#discontinuous-plane16");
      var discontinuousPlane17 = document.querySelector("#discontinuous-plane17");
      var discontinuousPlane18 = document.querySelector("#discontinuous-plane18");
      var discontinuousPlane19 = document.querySelector("#discontinuous-plane19");
      var discontinuousPlane20 = document.querySelector("#discontinuous-plane20");
      var discontinuousPlane21 = document.querySelector("#discontinuous-plane21");
      var discontinuousPlane22 = document.querySelector("#discontinuous-plane22");
      var discontinuousPlane23 = document.querySelector("#discontinuous-plane23");
      var discontinuousPlane24 = document.querySelector("#discontinuous-plane24");
      var discontinuousPlane25 = document.querySelector("#discontinuous-plane25");
      var discontinuousPlane26 = document.querySelector("#discontinuous-plane26");
      var flag = 0;
      view.addEventListener("click", function (evt) {
        if(flag === 0) {
          plane1.emit("startAnimation");
          plane2.emit("startAnimation");
          cone1.emit("startAnimation");
          cone2.emit("startAnimation");
          cone3.emit("startAnimation");
          cone4.emit("startAnimation");
          discontinuousPlane1.emit("startAnimation");
          discontinuousPlane2.emit("startAnimation");
          discontinuousPlane3.emit("startAnimation");
          discontinuousPlane4.emit("startAnimation");
          discontinuousPlane5.emit("startAnimation");
          discontinuousPlane6.emit("startAnimation");
          discontinuousPlane7.emit("startAnimation");
          discontinuousPlane8.emit("startAnimation");
          discontinuousPlane9.emit("startAnimation");
          discontinuousPlane10.emit("startAnimation");
          discontinuousPlane11.emit("startAnimation");
          discontinuousPlane12.emit("startAnimation");
          discontinuousPlane13.emit("startAnimation");
          discontinuousPlane14.emit("startAnimation");
          discontinuousPlane15.emit("startAnimation");
          discontinuousPlane16.emit("startAnimation");
          discontinuousPlane17.emit("startAnimation");
          discontinuousPlane18.emit("startAnimation");
          discontinuousPlane19.emit("startAnimation");
          discontinuousPlane20.emit("startAnimation");
          discontinuousPlane21.emit("startAnimation");
          discontinuousPlane22.emit("startAnimation");
          discontinuousPlane23.emit("startAnimation");
          discontinuousPlane24.emit("startAnimation");
          discontinuousPlane25.emit("startAnimation");
          discontinuousPlane26.emit("startAnimation");
          
          setTimeout(function(){ 
              light.setAttribute('light','type: directional; color: #FFF; intensity: 0.1" position="-0.5 1 1"');
          }, 2400);
          flag = 1
        }
        else {
          plane1.emit("endAnimation");
          plane2.emit("endAnimation");
          cone1.emit("endAnimation");
          cone2.emit("endAnimation");
          cone3.emit("endAnimation");
          cone4.emit("endAnimation");
          discontinuousPlane1.emit("endAnimation");
          discontinuousPlane2.emit("endAnimation");
          discontinuousPlane3.emit("endAnimation");
          discontinuousPlane4.emit("endAnimation");
          discontinuousPlane5.emit("endAnimation");
          discontinuousPlane6.emit("endAnimation");
          discontinuousPlane7.emit("endAnimation");
          discontinuousPlane8.emit("endAnimation");
          discontinuousPlane9.emit("endAnimation");
          discontinuousPlane10.emit("endAnimation");
          discontinuousPlane11.emit("endAnimation");
          discontinuousPlane12.emit("endAnimation");
          discontinuousPlane13.emit("endAnimation");
          discontinuousPlane14.emit("endAnimation");
          discontinuousPlane15.emit("endAnimation");
          discontinuousPlane16.emit("endAnimation");
          discontinuousPlane17.emit("endAnimation");
          discontinuousPlane18.emit("endAnimation");
          discontinuousPlane19.emit("endAnimation");
          discontinuousPlane20.emit("endAnimation");
          discontinuousPlane21.emit("endAnimation");
          discontinuousPlane22.emit("endAnimation");
          discontinuousPlane23.emit("endAnimation");
          discontinuousPlane24.emit("endAnimation");
          discontinuousPlane25.emit("endAnimation");
          discontinuousPlane26.emit("endAnimation");
          
          setTimeout(function(){ 
              light.setAttribute('light','type: directional; color: #FFF; intensity: 0.6" position="-0.5 1 1"');
          }, 3000);
          flag = 0;
        }
        console.log('clicked');
      });
    },
  });

  if (window.AFRAME == null) {
    console.error("aframe not found, please import it before this component.");
  }
  
  AFRAME.registerSystem("track-cursor", {
    init: function () {
      this.el.setAttribute("cursor", { rayOrigin: "mouse" });
      this.el.setAttribute("cursor", { color: "black" });
    },
  });
  
  var prev_pos = { x: 0, y: 0, z: 0 };
  
  AFRAME.registerComponent("track-cursor", {
    init: function () {
      this.el.addEventListener("mousedown", (e) => {
        if (this.el.is("cursor-hovered")) {
          this.el.sceneEl.camera.el.setAttribute("look-controls", {
            enabled: false,
          });
  
          this.el.addState("dragging");
        }
      });
  
      this.el.addEventListener("click", (e) => {
        if (this.el.is("dragging")) {
          this.el.sceneEl.camera.el.setAttribute("look-controls", {
            enabled: true,
          });
  
          this.el.removeState("dragging");
        }
      });
    },
  });
  
  AFRAME.registerComponent("dragndrop", {
    dependencies: ["track-cursor"],
  
    init: function () {
      this.range = 0;
  
      this.dist = 0;
  
      this.el.addEventListener("stateadded", (e) => {
        if (e.detail == "dragging") {
          this.range = 0;
  
          this.dist = this.el.object3D.position
  
            .clone()
  
            .sub(this.el.sceneEl.camera.el.object3D.position)
  
            .length();
        }
      });
  
      this.direction = new AFRAME.THREE.Vector3();
  
      this.target = new AFRAME.THREE.Vector3();
  
      document.addEventListener("wheel", (e) => {
        if (e.deltaY < 0) {
          this.range += 0.1;
        } else {
          this.range -= 0.1;
        }
      });
    },
  
    updateDirection: function () {
      this.direction.copy(this.el.sceneEl.getAttribute("raycaster").direction);
    },
  
    updateTarget: function () {
      let camera = this.el.sceneEl.camera.el;
  
      this.target.copy(
        camera.object3D.position
  
          .clone()
  
          .add(this.direction.clone().multiplyScalar(this.dist + this.range))
      );
    },
  
    tick: function () {
      if (this.el.is("dragging")) {
        this.updateDirection();
  
        this.updateTarget();
  
        this.el.object3D.position.copy(this.target);
      }
    },
  });
  
  AFRAME.registerComponent("dragnrotate1", {
    dependencies: ["track-cursor"],
    init: function () {
      this.range = 0;
  
      this.dist = 0;
  
      this.el.addEventListener("stateadded", (e) => {
        if (e.detail == "dragging") {
          this.range = 0;
  
          this.dist = this.el.object3D.position
  
            .clone()
  
            .sub(this.el.sceneEl.camera.el.object3D.position)
  
            .length();
        }
      });
  
      this.direction = new AFRAME.THREE.Vector3();
  
      this.target = new AFRAME.THREE.Vector3();
  
      document.addEventListener("wheel", (e) => {
        if (e.deltaY < 0) {
          this.range += 0.1;
        } else {
          this.range -= 0.1;
        }
      });
    },
  
    updateDirection: function () {
      this.direction.copy(this.el.sceneEl.getAttribute("raycaster").direction);
      let point = this.direction.multiplyScalar(this.dist); //what is dist here? maybe this.dist
  
      let x = point["x"] - prev_pos["x"];
      let y = point["y"] - prev_pos["y"];
      let z = point["z"] - prev_pos["z"];
      //console.log("x", x, "y", y, "z", z);
  
      if (x > 0) this.el.object3D.rotateY((-y * 1) / 1000);
      else this.el.object3D.rotateY((y * 1) / 1000);
      prev_pos["x"] = this.direction.multiplyScalar(this.dist)["x"];
      prev_pos["y"] = this.direction.multiplyScalar(this.dist)["y"];
      prev_pos["z"] = this.direction.multiplyScalar(this.dist)["z"];
    },
  
    updateTarget: function () {
      let camera = this.el.sceneEl.camera.el;
  
      this.target.copy(
        camera.object3D.position
  
          .clone()
  
          .add(this.direction.clone().multiplyScalar(this.dist + this.range))
      );
    },
  
    tick: function () {
      if (this.el.is("dragging")) {
        this.updateDirection();
      }
    },
  });
  
  AFRAME.registerComponent("dragnrotate2", {
    dependencies: ["track-cursor"],
    init: function () {
      this.range = 0;
  
      this.dist = 0;
  
      this.el.addEventListener("stateadded", (e) => {
        if (e.detail == "dragging") {
          this.range = 0;
  
          this.dist = this.el.object3D.position
  
            .clone()
  
            .sub(this.el.sceneEl.camera.el.object3D.position)
  
            .length();
        }
      });
  
      this.direction = new AFRAME.THREE.Vector3();
  
      this.target = new AFRAME.THREE.Vector3();
  
      document.addEventListener("wheel", (e) => {
        if (e.deltaY < 0) {
          this.range += 0.1;
        } else {
          this.range -= 0.1;
        }
      });
    },
  
    updateDirection: function () {
      this.direction.copy(this.el.sceneEl.getAttribute("raycaster").direction);
      let point = this.direction.multiplyScalar(this.dist);
  
      let x = point["x"] - prev_pos["x"];
      let y = point["y"] - prev_pos["y"];
      let z = point["z"] - prev_pos["z"];
      //console.log("x", x, "y", y, "z", z);
  
      if (y > 0) this.el.object3D.rotateX((-x * 1) / 50);
      else this.el.object3D.rotateX((x * 1) / 50);
      prev_pos["x"] = this.direction.multiplyScalar(this.dist)["x"];
      prev_pos["y"] = this.direction.multiplyScalar(this.dist)["y"];
      prev_pos["z"] = this.direction.multiplyScalar(this.dist)["z"];
    },
  
    updateTarget: function () {
      let camera = this.el.sceneEl.camera.el;
  
      this.target.copy(
        camera.object3D.position
  
          .clone()
  
          .add(this.direction.clone().multiplyScalar(this.dist + this.range))
      );
    },
  
    tick: function () {
      if (this.el.is("dragging")) {
        this.updateDirection();
      }
    },
  });
  
  AFRAME.registerComponent("dragnrotate3", {
    dependencies: ["track-cursor"],
  
    init: function () {
      this.range = 0;
  
      this.dist = 0;
      this.el.addEventListener("stateadded", (e) => {
        if (e.detail == "dragging") {
          this.range = 0;
  
          this.dist = this.el.object3D.position
  
            .clone()
  
            .sub(this.el.sceneEl.camera.el.object3D.position)
  
            .length();
        }
      });
  
      this.direction = new AFRAME.THREE.Vector3();
  
      this.target = new AFRAME.THREE.Vector3();
  
      document.addEventListener("wheel", (e) => {
        if (e.deltaY < 0) {
          this.range += 0.1;
        } else {
          this.range -= 0.1;
        }
      });
    },
  
    updateDirection: function () {
      this.direction.copy(this.el.sceneEl.getAttribute("raycaster").direction);
      let point = this.direction.multiplyScalar(this.dist);
  
      let x = point["x"] - prev_pos["x"];
      let y = point["y"] - prev_pos["y"];
      let z = point["z"] - prev_pos["z"];
      //console.log("x", x, "y", y, "z", z);
  
      if (x > 0) this.el.object3D.rotateZ((-z * 1) / 7000);
      else this.el.object3D.rotateZ((z * 1) / 7000);
  
      prev_pos["x"] = this.direction.multiplyScalar(this.dist)["x"];
      prev_pos["y"] = this.direction.multiplyScalar(this.dist)["y"];
      prev_pos["z"] = this.direction.multiplyScalar(this.dist)["z"];
    },
  
    updateTarget: function () {
      let camera = this.el.sceneEl.camera.el;
  
      this.target.copy(
        camera.object3D.position
  
          .clone()
  
          .add(this.direction.clone().multiplyScalar(this.dist + this.range))
      );
    },
  
    tick: function () {
      if (this.el.is("dragging")) {
        this.updateDirection();
      }
    },
  });
      </script>


      <a-entity id='cameraWrappers1' position="0 0 0" rotation="0 0 0">
        <a-camera rotation-reader position="0 1.6 0" id="cameraPositions1">
            <!-- <a-cursor id="cam2cursor" color="#f000f0" material="" raycaster="" cursor="" geometry="" position="0 0 -1" scale="1.5 1.5 1.5"></a-cursor> -->
        </a-camera>
      </a-entity>

      <a-plane
      id="discontinuous-plane1"
      foo
      position="-2.2 2.805 -1.05"
      width="1.9"
      rotation="-60 90 0"
      height="0.1"
      src="/Textures/Blinder_1.jpg"
      animation="property: rotation; to: 0 90 0; dur: 3500; startEvents: startAnimation"
      animation__2="property: rotation; to: -60 90 0; dur: 3500; startEvents: endAnimation"
  ></a-plane>
  <a-plane
      id="discontinuous-plane2"
      foo
      position="-2.2 2.7 -1.05"
      width="1.9"
      rotation="-60 90 0"
      height="0.1"
      src="/Textures/Blinder_1.jpg"
      animation="property: rotation; to: 0 90 0; dur: 3500; startEvents: startAnimation"
      animation__2="property: rotation; to: -60 90 0; dur: 3500; startEvents: endAnimation"
  ></a-plane>
  <a-plane
      id="discontinuous-plane3"
      foo
      position="-2.2 2.595 -1.05"
      width="1.9"
      rotation="-60 90 0"
      height="0.1"
      src="/Textures/Blinder_1.jpg"
      animation="property: rotation; to: 0 90 0; dur: 3500; startEvents: startAnimation"
      animation__2="property: rotation; to: -60 90 0; dur: 3500; startEvents: endAnimation"
  ></a-plane>
  <a-plane
      id="discontinuous-plane4"
      foo
      position="-2.2 2.49 -1.05"
      width="1.9"
      rotation="-60 90 0"
      height="0.1"
      src="/Textures/Blinder_1.jpg"
      animation="property: rotation; to: 0 90 0; dur: 3500; startEvents: startAnimation"
      animation__2="property: rotation; to: -60 90 0; dur: 3500; startEvents: endAnimation"
  ></a-plane>
  <a-plane
      id="discontinuous-plane5"
      foo
      position="-2.2 2.385 -1.05"
      width="1.9"
      rotation="-60 90 0"
      height="0.1"
      src="/Textures/Blinder_1.jpg"
      animation="property: rotation; to: 0 90 0; dur: 3500; startEvents: startAnimation"
      animation__2="property: rotation; to: -60 90 0; dur: 3500; startEvents: endAnimation"
  ></a-plane>
  <a-plane
      id="discontinuous-plane6"
      foo
      position="-2.2 2.28 -1.05"
      width="1.9"
      rotation="-60 90 0"
      height="0.1"
      src="/Textures/Blinder_1.jpg"
      animation="property: rotation; to: 0 90 0; dur: 3500; startEvents: startAnimation"
      animation__2="property: rotation; to: -60 90 0; dur: 3500; startEvents: endAnimation"
  ></a-plane>
  <a-plane
      id="discontinuous-plane7"
      foo
      position="-2.2 2.175 -1.05"
      width="1.9"
      rotation="-60 90 0"
      height="0.1"
      src="/Textures/Blinder_1.jpg"
      animation="property: rotation; to: 0 90 0; dur: 3500; startEvents: startAnimation"
      animation__2="property: rotation; to: -60 90 0; dur: 3500; startEvents: endAnimation"
  ></a-plane>
  <a-plane
      id="discontinuous-plane8"
      foo
      position="-2.2 2.07 -1.05"
      width="1.9"
      rotation="-60 90 0"
      height="0.1"
      src="/Textures/Blinder_1.jpg"
      animation="property: rotation; to: 0 90 0; dur: 3500; startEvents: startAnimation"
      animation__2="property: rotation; to: -60 90 0; dur: 3500; startEvents: endAnimation"
  ></a-plane>
  <a-plane
      id="discontinuous-plane9"
      foo
      position="-2.2 1.965 -1.05"
      width="1.9"
      rotation="-60 90 0"
      height="0.1"
      src="/Textures/Blinder_1.jpg"
      animation="property: rotation; to: 0 90 0; dur: 3500; startEvents: startAnimation"
      animation__2="property: rotation; to: -60 90 0; dur: 3500; startEvents: endAnimation"
  ></a-plane>
  <a-plane
      id="discontinuous-plane10"
      foo
      position="-2.2 1.86 -1.05"
      width="1.9"
      rotation="-60 90 0"
      height="0.1"
      src="/Textures/Blinder_1.jpg"
      animation="property: rotation; to: 0 90 0; dur: 3500; startEvents: startAnimation"
      animation__2="property: rotation; to: -60 90 0; dur: 3500; startEvents: endAnimation"
  ></a-plane>
  <a-plane
      id="discontinuous-plane11"
      foo
      position="-2.2 1.755 -1.05"
      width="1.9"
      rotation="-60 90 0"
      height="0.1"
      src="/Textures/Blinder_1.jpg"
      animation="property: rotation; to: 0 90 0; dur: 3500; startEvents: startAnimation"
      animation__2="property: rotation; to: -60 90 0; dur: 3500; startEvents: endAnimation"
  ></a-plane>
  <a-plane
      id="discontinuous-plane12"
      foo
      position="-2.2 1.65 -1.05"
      width="1.9"
      rotation="-60 90 0"
      height="0.1"
      src="/Textures/Blinder_1.jpg"
      animation="property: rotation; to: 0 90 0; dur: 3500; startEvents: startAnimation"
      animation__2="property: rotation; to: -60 90 0; dur: 3500; startEvents: endAnimation"
  ></a-plane>
  <a-plane
      id="discontinuous-plane13"
      foo
      position="-2.2 1.545 -1.05"
      width="1.9"
      rotation="-60 90 0"
      height="0.1"
      src="/Textures/Blinder_1.jpg"
      animation="property: rotation; to: 0 90 0; dur: 3500; startEvents: startAnimation"
      animation__2="property: rotation; to: -60 90 0; dur: 3500; startEvents: endAnimation"
  ></a-plane>
  <a-plane
      id="discontinuous-plane14"
      foo
      position="-2.2 1.44 -1.05"
      width="1.9"
      rotation="-60 90 0"
      height="0.1"
      src="/Textures/Blinder_1.jpg"
      animation="property: rotation; to: 0 90 0; dur: 3500; startEvents: startAnimation"
      animation__2="property: rotation; to: -60 90 0; dur: 3500; startEvents: endAnimation"
  ></a-plane>
  <a-plane
      id="discontinuous-plane15"
      foo
      position="-2.2 1.335 -1.05"
      width="1.9"
      rotation="-60 90 0"
      height="0.1"
      src="/Textures/Blinder_1.jpg"
      animation="property: rotation; to: 0 90 0; dur: 3500; startEvents: startAnimation"
      animation__2="property: rotation; to: -60 90 0; dur: 3500; startEvents: endAnimation"
  ></a-plane>
  <a-plane
      id="discontinuous-plane16"
      foo
      position="-2.2 1.23 -1.05"
      width="1.9"
      rotation="-60 90 0"
      height="0.1"
      src="/Textures/Blinder_1.jpg"
      animation="property: rotation; to: 0 90 0; dur: 3500; startEvents: startAnimation"
      animation__2="property: rotation; to: -60 90 0; dur: 3500; startEvents: endAnimation"
  ></a-plane>
  <a-plane
      id="discontinuous-plane17"
      foo
      position="-2.2 1.125 -1.05"
      width="1.9"
      rotation="-60 90 0"
      height="0.1"
      src="/Textures/Blinder_1.jpg"
      animation="property: rotation; to: 0 90 0; dur: 3500; startEvents: startAnimation"
      animation__2="property: rotation; to: -60 90 0; dur: 3500; startEvents: endAnimation"
  ></a-plane>
  <a-plane
      id="discontinuous-plane18"
      foo
      position="-2.2 1.02 -1.05"
      width="1.9"
      rotation="-60 90 0"
      height="0.1"
      src="/Textures/Blinder_1.jpg"
      animation="property: rotation; to: 0 90 0; dur: 3500; startEvents: startAnimation"
      animation__2="property: rotation; to: -60 90 0; dur: 3500; startEvents: endAnimation"
  ></a-plane>
  <a-plane
      id="discontinuous-plane19"
      foo
      position="-2.2 0.915 -1.05"
      width="1.9"
      rotation="-60 90 0"
      height="0.1"
      src="/Textures/Blinder_1.jpg"
      animation="property: rotation; to: 0 90 0; dur: 3500; startEvents: startAnimation"
      animation__2="property: rotation; to: -60 90 0; dur: 3500; startEvents: endAnimation"
  ></a-plane>
  <a-plane
      id="discontinuous-plane20"
      foo
      position="-2.2 0.81 -1.05"
      width="1.9"
      rotation="-60 90 0"
      height="0.1"
      src="/Textures/Blinder_1.jpg"
      animation="property: rotation; to: 0 90 0; dur: 3500; startEvents: startAnimation"
      animation__2="property: rotation; to: -60 90 0; dur: 3500; startEvents: endAnimation"
  ></a-plane>
  <a-plane
      id="discontinuous-plane21"
      foo
      position="-2.2 0.705 -1.05"
      width="1.9"
      rotation="-60 90 0"
      height="0.1"
      src="/Textures/Blinder_1.jpg"
      animation="property: rotation; to: 0 90 0; dur: 3500; startEvents: startAnimation"
      animation__2="property: rotation; to: -60 90 0; dur: 3500; startEvents: endAnimation"
  ></a-plane>
  <a-plane
      id="discontinuous-plane22"
      foo
      position="-2.2 0.6 -1.05"
      width="1.9"
      rotation="-60 90 0"
      height="0.1"
      src="/Textures/Blinder_1.jpg"
      animation="property: rotation; to: 0 90 0; dur: 3500; startEvents: startAnimation"
      animation__2="property: rotation; to: -60 90 0; dur: 3500; startEvents: endAnimation"
  ></a-plane>
  <a-plane
      id="discontinuous-plane23"
      foo
      position="-2.2 0.495 -1.05"
      width="1.9"
      rotation="-60 90 0"
      height="0.1"
      src="/Textures/Blinder_1.jpg"
      animation="property: rotation; to: 0 90 0; dur: 3500; startEvents: startAnimation"
      animation__2="property: rotation; to: -60 90 0; dur: 3500; startEvents: endAnimation"
  ></a-plane>
  <a-plane
      id="discontinuous-plane24"
      foo
      position="-2.2 0.39 -1.05"
      width="1.9"
      rotation="-60 90 0"
      height="0.1"
      src="/Textures/Blinder_1.jpg"
      animation="property: rotation; to: 0 90 0; dur: 3500; startEvents: startAnimation"
      animation__2="property: rotation; to: -60 90 0; dur: 3500; startEvents: endAnimation"
  ></a-plane>
  <a-plane
      id="discontinuous-plane25"
      foo
      position="-2.2 0.285 -1.05"
      width="1.9"
      rotation="-60 90 0"
      height="0.1"
      src="/Textures/Blinder_1.jpg"
      animation="property: rotation; to: 0 90 0; dur: 3500; startEvents: startAnimation"
      animation__2="property: rotation; to: -60 90 0; dur: 3500; startEvents: endAnimation"
  ></a-plane>
  <a-plane
      id="discontinuous-plane26"
      foo
      position="-2.2 0.18 -1.05"
      width="1.9"
      rotation="-60 90 0"
      height="0.1"
      src="/Textures/Blinder_1.jpg"
      animation="property: rotation; to: 0 90 0; dur: 3500; startEvents: startAnimation"
      animation__2="property: rotation; to: -60 90 0; dur: 3500; startEvents: endAnimation"
  ></a-plane>
</a-obj-model>
<a-obj-model src="#w3-obj" mtl="#w3-mtl">
  <a-plane
    id="curtain-plane1"
    position="-1.202 3 1.35"
    rotation="0 90 0"
    width="0.7"
    height="6"
    src="/Textures/Shader1.jpg"
    opacity="0"
    foo
    animation="property: opacity; to: 1; dur: 2500; startEvents: startAnimation"
    animation__2="property: opacity; to: 0; dur: 3400; startEvents: endAnimation"
  ></a-plane>
  <a-cone
      id="curtain-cone1"
      position="-1.202 0 1.6"
      radius-bottom="0.3"
      src="/Textures/Shader1.jpg"
      height="3"
      animation="property: position; to: -1.202 0 0.85; dur: 3400; startEvents: startAnimation"
      animation__2="property: theta-length; from: 360; to: 0; dur: 2500; startEvents: startAnimation"
      animation__3="property: position; to: -1.202 0 1.6; dur: 3400; startEvents: endAnimation"
      animation__4="property: theta-length; to: 360; dur: 1000; startEvents: endAnimation"
      
  ></a-cone>
  <a-cone
      id="curtain-cone2"
      position="-1.202 2.8 1.6"
      rotation="0 0 180"
      radius-bottom="0.3"
      src="/Textures/Shader1.jpg"
      height="3"
      foo
      animation="property: position; to: -1.202 2.8 0.85; dur: 3400; startEvents: startAnimation"
      animation__2="property: theta-length; from: 360; to: 0; dur: 2500; startEvents: startAnimation"
      animation__3="property: position; to: -1.202 2.8 1.6; dur: 3400; startEvents: endAnimation"
      animation__4="property: theta-length; to: 360; dur: 1000; startEvents: endAnimation"
  ></a-cone>
  <a-plane
    id="curtain-plane2"
    position="-1.202 3 0.65"
    rotation="0 90 0"
    width="0.7"
    height="6"
    opacity="0"
    src="/Textures/Shader1.jpg"
    foo
    animation="property: opacity; to: 1; dur: 2500; startEvents: startAnimation"
    animation__2="property: opacity; to: 0; dur: 3400; startEvents: endAnimation"
  ></a-plane>
  <a-cone
      id="curtain-cone3"
      position="-1.202 0 0.4"
      radius-bottom="0.3"
      src="/Textures/Shader1.jpg"
      height="3"
      foo
      animation="property: position; to: -1.202 0 0.85; dur: 3400; startEvents: startAnimation"
      animation__2="property: theta-length; from: 360; to: 0; dur: 2500; startEvents: startAnimation"
      animation__3="property: position; to: -1.202 0 0.4; dur: 3400; startEvents: endAnimation"
      animation__4="property: theta-length; to: 360; dur: 1000; startEvents: endAnimation"
      
  ></a-cone>
  <a-cone
      id="curtain-cone4"
      position="-1.202 2.8 0.4"
      rotation="0 0 180"
      radius-bottom="0.3"
      src="/Textures/Shader1.jpg"
      height="3"
      foo
      animation="property: position; to: -1.202 2.8 0.85; dur: 3400; startEvents: startAnimation"
      animation__2="property: theta-length; from: 360; to: 0; dur: 2500; startEvents: startAnimation"
      animation__3="property: position; to: -1.202 2.8 0.4; dur: 3400; startEvents: endAnimation"
      animation__4="property: theta-length; to: 360; dur: 1000; startEvents: endAnimation"
  ></a-cone>


      <a-obj-model src="#footer-obj"></a-obj-model>
      <a-sphere id="button" position="-1 1 0.15" scale="0.1 0.1 0.1" color="#FFF"></a-sphere>
      <a-entity light="type: ambient; color: #BBB"></a-entity>
      <a-entity id="light" light="type: directional; color: #FFF; intensity: 0.6" position="-0.5 1 1"></a-entity>
    </a-scene>

    <div id="objects" style="display: none;">
        <button class="card" id="chair" onclick="chair()"></button>
        <button class="card" id="sofa" onclick="sofa()"></button>
        <button class="card" id="table" onclick="table()"></button>
        <button class="card" id="sofa1" onclick="sofa1()"></button>
        <button class="card" id="photo" onclick="photo()"></button>
    </div>

    <div id="objectmenu" style="display: none;">
        <button class="card" id="color" onclick="color()"></button>
        <button class="card" id="rotation" onclick="rotation()"></button>
        <button class="card" id="scaling" onclick="scaling()"></button>
        <button class="card" id="position" onclick="position()"></button>
        <button class="card" id="movefree" onclick="moveFree()"></button>
        <button class="card" id="remove" onclick="remove()"></button>
    </div>
    
    <div id="rotating" style="display: none;">
      <p>X: <span id="demo1"></span></p>
      <button onclick="change_rotation('x','+')">+</button>
      <button onclick="change_rotation('x','-')">-</button>

      <p>Y: <span id="demo2"></span></p>
      <button onclick="change_rotation('y','-')">+</button> 
      <button onclick="change_rotation('y','+')">-</button>
    
      <p>Z: <span id="demo3"></span></p>
      <button onclick="change_rotation('z','+')">+</button>
      <button onclick="change_rotation('z','-')">-</button>  
    </div>

    <div id="scaling_options" style="display: none;">
      <p>Scale: <span id="demo1"></span></p>
      <button onclick="change_scale('+')">+</button>
      <button onclick="change_scale('-')">-</button>
    </div>

    <div id="moves" style="display: none;">
        <button class="card" id="posx" onclick="rots('x')"></button>
        <button class="card" id="posy" onclick="rots('y')"></button>
        <button class="card" id="posz" onclick="rots('z')"></button>
        <button class="card" id="moves_on" onclick="movesOn()"></button>
    </div>

    <div id="moving" style="display: none;">
      <p>X: <span id="demo1"></span></p>
      <button onclick="change_position('x','+')">+</button>
      <button onclick="change_position('x','-')">-</button>

      <p>Y: <span id="demo2"></span></p>
      <button onclick="change_position('y','-')">+</button> 
      <button onclick="change_position('y','+')">-</button>
    
      <p>Z: <span id="demo3"></span></p>
      <button onclick="change_position('z','+')">+</button>
      <button onclick="change_position('z','-')">-</button>  
    </div>

    <div id="colors" style="display: none;">
        <button class="card" id="objmtl" onclick="objmtl()"></button>
        <button class="card" id="green" onclick="green()"></button>
        <button class="card" id="red" onclick="red()"></button>
        <button class="card" id="brown" onclick="brown()"></button>
    </div>

    <div class="circleWrapper">
        <div class="circle" id="collapse1" style="animation-delay: 0s"></div>
        <div class="circle" id="collapse2" style="animation-delay: 1s"></div>
        <div class="circle" id="collapse3" style="animation-delay: 2s"></div>
        <div class="circle" onmouseover="mouse(this)" id="collapse" data-toggle="collapse" data-target="#collapseOne" style="animation-delay: 3s"></div>
        
        <div id="collapseOne" class="collapse" >
            <h3 style="color: deepskyblue; opacity:0.6">Teleportation</h3>
            <label class="switch">
                <input type="checkbox" class="myCheck" checked id="toggle">
                <span class="slider round"></span>
            </label>
            </div>
    </div>

  </body>
</html>